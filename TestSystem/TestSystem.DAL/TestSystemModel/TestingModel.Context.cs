//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestSystem.DAL.TestSystemModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.SqlClient;
    using System.Data;

    public partial class TestSystemDBEntities : DbContext
    {
        public TestSystemDBEntities()
            : base("name=TestSystemDBEntities")
        {
        }
    
        
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<Discipline> Disciplines { get; set; }
        public virtual DbSet<MaterialsInfo> MaterialsInfos { get; set; }
        public virtual DbSet<Photo> Photos { get; set; }
        public virtual DbSet<QuestionAnswer> QuestionAnswers { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Result> Results { get; set; }
        public virtual DbSet<TestLanguage> TestLanguages { get; set; }
        public virtual DbSet<TestMaterial> TestMaterials { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<Theme> Themes { get; set; }
    
        [DbFunction("TestSystemDBEntities", "GetUserByLogin")]
        public virtual IQueryable<GetUserByLogin_Result> GetUserByLogin(string userLogin)
        {
            var userLoginParameter = userLogin != null ?
                new ObjectParameter("userLogin", userLogin) :
                new ObjectParameter("userLogin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUserByLogin_Result>("[TestSystemDBEntities].[GetUserByLogin](@userLogin)", userLoginParameter);
        }
    
        public virtual int CreateUser(string firstname, string secondname, string fathername)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var secondnameParameter = secondname != null ?
                new ObjectParameter("Secondname", secondname) :
                new ObjectParameter("Secondname", typeof(string));
    
            var fathernameParameter = fathername != null ?
                new ObjectParameter("Fathername", fathername) :
                new ObjectParameter("Fathername", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUser", firstnameParameter, secondnameParameter, fathernameParameter);
        }
    
        public virtual int CreateUserAuntifaction(string login, string password, Nullable<bool> isAdmin)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUserAuntifaction", loginParameter, passwordParameter, isAdminParameter);
        }
    
        public virtual int EditUser(Nullable<int> userId, string firstName, string secondname, string fathername)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var secondnameParameter = secondname != null ?
                new ObjectParameter("Secondname", secondname) :
                new ObjectParameter("Secondname", typeof(string));
    
            var fathernameParameter = fathername != null ?
                new ObjectParameter("Fathername", fathername) :
                new ObjectParameter("Fathername", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditUser", userIdParameter, firstNameParameter, secondnameParameter, fathernameParameter);
        }
    
        public virtual int SetUserInfoForAuntification(string login, Nullable<int> userId)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetUserInfoForAuntification", loginParameter, userIdParameter);
        }
    
        public virtual int SetUserPhotoId(Nullable<int> userId, Nullable<int> photoId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var photoIdParameter = photoId.HasValue ?
                new ObjectParameter("PhotoId", photoId) :
                new ObjectParameter("PhotoId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetUserPhotoId", userIdParameter, photoIdParameter);
        }
    
        public virtual int SetAdminForUser(string login, Nullable<bool> adminStatment)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var adminStatmentParameter = adminStatment.HasValue ?
                new ObjectParameter("adminStatment", adminStatment) :
                new ObjectParameter("adminStatment", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetAdminForUser", loginParameter, adminStatmentParameter);
        }

        public bool CheckAuthorization(string login, string password)
        {
            

            bool res = this.Database.SqlQuery<bool>("SELECT TestSystemDB.dbo.CheckAuthorization(@p0, @p1)",
                login, password).FirstOrDefault();
            return Convert.ToBoolean(res);
        }
        public bool IsAdmin(string login)
        {
            bool res = this.Database.SqlQuery<bool>("SELECT TestSystemDB.dbo.IsAdmin(@p0)",
               login).First();
            return Convert.ToBoolean(res);
        }
        public bool IsLoginFree(string login)
        {
            bool res = this.Database.SqlQuery<bool>("SELECT TestSystemDB.dbo.IsLoginFree(@p0)",
                login).FirstOrDefault();
            return Convert.ToBoolean(res);
        }

        public int CreateUserAndGetId(string firstname, string secondname, string fathername)
        {
            var firstnameParameter = firstname != null ?
                new SqlParameter("@Firstname", firstname) :
                new SqlParameter("@Firstname", typeof(string));

            var secondnameParameter = secondname != null ?
                new SqlParameter("@Secondname", secondname) :
                new SqlParameter("@Secondname", typeof(string));

            var fathernameParameter = fathername != null ?
                new SqlParameter("@Fathername", fathername) :
                new SqlParameter("@Fathername", typeof(string));

            var id = new SqlParameter("@Id",int.Parse("0"));
            id.Direction = System.Data.ParameterDirection.InputOutput;
            id.Size = 30;

            this.Database.SqlQuery<object>("EXEC TestSystemDB.dbo.CreateUserAndGetId @Firstname, @Secondname, @Fathername, @Id out",
                id, firstnameParameter, secondnameParameter, fathernameParameter).FirstOrDefault();
            return Convert.ToInt32(id.Value);
        }
    }
}
